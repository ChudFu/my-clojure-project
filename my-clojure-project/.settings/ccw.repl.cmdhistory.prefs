cmdhistory=["(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "(+ 5 6)" "(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "(def xs (let [rnd (java.util.Random.)]\\r\\n  (long-array (repeatedly 100000 \#(.nextLong rnd)))))\\r\\n \\r\\n(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "(read \\"numbers.dat\\")" "(read \\"resources\\\\numbers.dat\\")" "(read \\"resources/numbers.dat" "(read \\"resources/numbers.dat\\")" "(slurp \\"numbers.dat\\")" "(slurp \\"resources/numbers.dat\\")" "(read)" "[1 2 3 4 5]" "[(slurp \\"resource/numbers.dat\\")]" "[(slurp \\"resources/numbers.dat\\")]" "(into-array Integer/TYPE [(slurp \\"resources/smtest.dat\\")])" "(into-array int [(slurp \\"resources/smtest.dat\\")])" "(into-array [(slurp \\"resources/smtest.dat\\")])" "(into-array (slurp \\"resources/smtest.dat\\"))" "(into-array int (slurp \\"resources/smtest.dat\\"))" "(into-array int [(slurp \\"resources/smtest.dat\\")])" "[(slurp \\"resources/smtest.dat\\")]" "(slurp \\"resources/smtest.dat\\")" "(int-array (slurp \\"resources/smtest.dat\\"))" "(int-array [(slurp \\"resources/smtest.dat\\")])" "(let [input (slurp \\"resource/smtest.dat\\")] (read-string (str \\"[\\" input \\"]\\")))" "(let [input (slurp \\"resources/smtest.dat\\")] (read-string (str \\"[\\" input \\"]\\")))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n         (count (line-seq rdr)))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] (println rdr))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")])" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n         (println (line-seq rdr)))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (time (qsort (line-seq rdr))))" "  (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (println [line-seq rdr]))" "  (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (println (line-seq rdr)))" "  (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (time (qsort (line-seq rdr))))" "  (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (into-array (line-seq rdr)))" "  (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (into-array Integer/TYPE (line-seq rdr)))" "  (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (into-array int (line-seq rdr)))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (line-seq rdr)))" "(into-array Object [2 \\"4\\" \\"8\\" 5])" "(into-array int [2 \\"4\\" \\"8\\" 5])" "(into-array Integer/TYPE [2 \\"4\\" \\"8\\" 5])" "(into-array [2 \\"4\\" \\"8\\" 5])" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (into-array Integer/parseInt (line-seq rdr)))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (map read-string (into-array (line-seq rdr))))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (qsort (map read-string (into-array (line-seq rdr)))))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (map \#(Integer/parseInt %) (into-array (line-seq rdr))))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (into-array (line-seq rdr)))" "[5 6 7 8 9]" "(into-array [5 6 7 8 9])" "qsort((into-array [5 6 7 8 9]))" "qsort([6,5,7,8])" "(qsort [6,5,7,8])" "(qsort [5 4 6 3 8])" "(qsort (long-array [5 4 7 3]))" "(long-array [5 4 7 3])" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (long-array (line-seq rdr)))" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n    (into-array (map \#(Integer/parseInt %) (line-seq rdr))))" "(slurp \\"resources/smtest.dat\\")" "(into-array (slurp \\"resources/smtest.dat\\"))" "(into-array (map \#(Integer/parseInt %) (slurp \\"resources/smtest.dat\\")))" "(long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))" "(qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \#(Integer/parseInt %) (line-seq rdr))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \#(Integer/parseInt %)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (Integer/parseInt %) (line-seq rdr))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (line-seq rdr))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \\n                     (Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \#(Integer/parseInt) (line-seq rdr)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "  (time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]\\r\\n       (into-array (line-seq rdr))))))" "  (time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(defn read [(slurp \\"resources/smtest.dat\\")])\\r\\n  (into-array type aseq)\\r\\n  (qsort (long-array [5 4 7 3]))\\r\\n  (map \#(Integer/parseInt %) [\\"1\\" \\"2\\" \\"3\\" \\"4\\"])\\r\\n  (time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(defn read [(slurp \\"resources/smtest.dat\\")])\\r\\n  (into-array type aseq)\\r\\n  (qsort (long-array [5 4 7 3]))\\r\\n  (map \#(Integer/parseInt %) [\\"1\\" \\"2\\" \\"3\\" \\"4\\"])\\r\\n  (time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(def xs (let [rnd (java.util.Random.)]\\r\\n  (long-array (repeatedly 100000 \#(.nextLong rnd)))))\\r\\n \\r\\n(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")]))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/numbers.dat\\")]))))" "  (time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/numbers.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (reader)))" "(time (qsort (reader thearray)))" "  (time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/numbers.dat\\")] \\r\\n                             ~(into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "  (time (qsort ~(long-array (with-open [rdr (clojure.java.io/reader \\"resources/numbers.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (reader \\"resources/smtest.dat\\")))" "(def xs (let [rnd (java.util.Random.)]\\r\\n  (long-array (repeatedly 100000 \#(.nextLong rnd)))))\\r\\n \\r\\n(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (long-array `(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (reader \\"resources/smtest.dat\\")))" "(time (qsort (reader [\\"resources/smtest.dat\\" str])))" "(time (qsort (reader [\\"resources/smtest.dat\\"])))" "(time (qsort (long-array `(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#{Integer/parseInt %} (line-seq rdr)))))))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into \#{} (line-seq rdr))))))" "(long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))" "(time (qsort (time (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                                   (into-array (map \#(Integer/parseInt %) (line-seq rdr))))))))" "(time (qsort (reader \\"resources/smtest.dat\\")))" "(time (qsort (read-file \\"resources/smtest.dat\\")))" "(defn read-file [fname] \\r\\n  (long-array (with-open [rdr\# (io/reader fname)] \\r\\n                (into-array (map \#(Integer/parseInt %) (line-seq rdr))))))" "(time (qsort (read-file \\"resources/smtest.dat\\")))" "(time (qsort (long-array (with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] \\r\\n                             (into-array (map \#(Integer/parseInt %) (line-seq rdr)))))))" "(def xs (let [rnd (java.util.Random.)]\\r\\n  (long-array (repeatedly 100000 \#(.nextLong rnd)))))\\r\\n \\r\\n(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "\\r\\n(def xs (let [rnd (java.util.Random.)]\\r\\n  (long-array (repeatedly 100000 \#(.nextLong rnd)))))\\r\\n \\r\\n(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "(def xs (let [rnd (java.util.Random.)]\\r\\n  (long-array (repeatedly 100000 \#(.nextLong rnd)))))\\r\\n \\r\\n(dotimes [i 10]\\r\\n  (let [ys (long-array xs)]\\r\\n    (time (qsort ys))))" "(time (merge-sort (read-line \\"smtest.dat\\")))" "(let [list (read-line \\"resources/smtest.dat\\")] (dotimes [i 5] (time (merge-sort list))))" "(read-line \\"resources/smtest.dat\\")" "(+ 3 2)" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] (into-array (map \#(Integer/parseInt %) (line-seq rdr))))" "(read-line \\"resources/smtest.dat\\")" "(with-open [rdr (clojure.java.io/reader \\"resources/smtest.dat\\")] (into-array (map \#(Integer/parseInt %) (line-seq rdr))))" "(read-line \\"resources/smtest.dat\\")" "(merge-sort (read-line \\"resources/smtest.dat\\"))" "(let [list (read-line \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-2 list))))" "(merge-sort-2 (read-line \\"resources/mstest.dat\\"))" "(merge-sort-2 (read-line \\"resources/smtest.dat\\"))" "(merge-sort-prime (read-line \\"resources/smtest.dat\\"))" "(merge-sort-2 (read-line \\"resources/smtest.dat\\"))" "(merge-sort-4 (read-line \\"resources/smtest.dat\\"))" "(let [list (read-line \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-prime list))))" "(let [list (read-line \\"resources/numbers.dat\\")] (merge-sort-prime list))" "(merge-sort-prime (read-line \\"resources/smtest.dat\\"))" "(let [list (read-line \\"resources/smtest.dat\\")] (merge-sort-prime list))" "(let [list (read-line \\"resources/numbers.dat\\")] (merge-sort-prime list))" "(let [list (read-line \\"resources/numbers.dat\\")] (merge-sort list))" "(let [list (read-line \\"resources/smtest.dat\\")] (merge-sort list))" "(let [list (read-line \\"resources/numbers.dat\\")] (merge-sort list))" "(merge-sort (read-line \\"resources/smtest.dat\\"))" "(mrgsrt (read-line \\"resources/smtest.dat\\"))" "(mrgsrt (read-line \\"resources/numbers.dat\\"))" "(read-line \\"resources/numbers.dat\\")" "(let [list (read-line \\"resrouces/numbers.dat\\")] (mrgsrt list))" "(let [list (read-line \\"resources/numbers.dat\\")] (mrgsrt list))" "(mergesort (read-line \\"resources/smtest.dat\\"))" "(mergesort (read-line \\"resources/numbers.dat\\"))" "(merge-sort-prime (get-list \\"resources/smtest.dat\\"))" "(merge-sort-2 (get-list \\"resources/smtest.dat\\"))" "(merge-sort-2 (get-list \\"resources/numbers.dat\\"))" "(merge-sort-32 (get-list \\"resources/smtest.dat\\"))" "(merge-sort-32 (get-list \\"resources/numbers.dat\\"))" "(let [list (get-line \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-prime list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-prime list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-2 list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-4 list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-8 list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-16 list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-32 list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-prime list))))" "(merge-sort-prime (get-list \\"resources/smtest.dat\\"))" "(time (merge-sort-prime (get-list \\"resources/numbers.dat\\")))" "(let [list (get-list \\"resources/numbers.dat\\")] (dotimes [i 5] (time (merge-sort-prime list))))" "(let [list (get-list \\"resources/numbers.dat\\")] (time (merge-sort-prime list)))"]
eclipse.preferences.version=1
